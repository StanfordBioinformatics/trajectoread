#!/usr/bin/env python

import sys
import dxpy
import re
import subprocess

import string

def build_sequence(sequence, exclude_positions, N, soft_clipping):
    A = []
    T = []
    C = []
    G = []
    i = 0
    for j in range(0, len(sequence)):
        if j not in soft_clipping:
            if(sequence[j]) != "=" and j not in exclude_positions:
                if sequence[j] == "A":
                    A.append(str(i))
                elif sequence[j] == "T":
                    T.append(str(i))
                elif sequence[j] == "G":
                    G.append(str(i))
                elif sequence[j] == "C":
                    C.append(str(i))
                elif sequence[j] == "N" and str(i) not in N:
                    N.append(str(i))
            i += 1
    results = ""
    if A != []:
        results += "A"+",".join(A)
    if T != []:
        results += "T"+",".join(T)
    if C != []:
        results += "C"+",".join(C)
    if G != []:
        results += "G"+",".join(G)
    if N != []:
        results += "N"+",".join(N)
    return results


def main():    
    table_id = sys.argv[1]
    
    complement_table = string.maketrans("ATGCatgc=", "TACGTACG=")
    table = dxpy.open_dxgtable(table_id)
    
    count = 0
    rows = []
    for line in sys.stdin:
        if line[0] != "@":

            entries = line.split("\t")
            sequence = entries[9]
            chromosome = entries[2]
            flag = int(entries[1])
            pos = int(entries[3])
            cigar = entries[5]

            N = []
            for i in range(len(sequence)):
                if sequence[i] == "N":
                    N.append(str(i))


            exclude_positions = []
            soft_clipping = []
            position = 0
            length = 0
            insert = ""
            cigar_elements = re.split('(\d+)', entries[5])
            for p in range(len(cigar_elements)):
                c = cigar_elements[p]
                if c == 'M' or c == 'I' or c == 'X' or c == '=' or c == "S":
                    if c == "I":
                        insert += sequence[position:position+int(cigar_elements[p-1])]
                        for i in range(position, position+int(cigar_elements[p-1])):
                            exclude_positions.append(i)
                    if c == "S":
                        for i in range(position, position+int(cigar_elements[p-1])):
                            soft_clipping.append(i)
                    position += int(cigar_elements[p-1])
                    #if c == "I" or c == "S":
                    #    for i in range(position, position+int(cigar_elements[p-1])):
                    #        exclude_positions.append(i)
                    #position += int(cigar_elements[p-1])
                if c == 'M' or c == 'D' or c == 'N' or c == 'X' or c == 'P' or c == '=':
                        length += int(cigar_elements[p-1])

            if not (flag & 0x4):
                negative_strand = False
                if flag & 0x10:
                    negative_strand = True
                    #sequence = sequence.translate(complement_table)[::-1]
                    insert = insert.translate(complement_table)[::-1]
                        
                sequence = build_sequence(sequence, exclude_positions, N, soft_clipping)
                lo = pos - 1
                hi = lo + length
                rows.append([sequence, insert, chromosome, lo, hi, negative_strand, cigar])
                if len(rows) == 4096:
                    table.add_rows(rows)
                    rows = []
            #else:
            #    rows.append([sequence, chromosome, lo, hi, negative_strand, cigar])
        count += 1
        if count % 100000 == 0 and count > 0:
            table.flush()
    table.add_rows(rows)
    table.flush()
main()
