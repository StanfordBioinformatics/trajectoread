#!/usr/bin/env python

from pipeline_utils import pu, conf
from argparse import ArgumentParser
  
description = """This script provides an interface to utilities provided in the pu.py module. The utilities are for intereacting with the DNAnexus account to which you are currently connected. This script will verify that you have thedx toolkit in your environment and are currently logged into to a DNAnexus account.
The utilities provided here include:
	1) set_lims_credentials,
	2) get_lims_credentials,
	3) init,
	4) upload_resources,
	5) prepare_applets,
	6) build_applets, and
	7) clean_applets
"""

#define subparser names
setLimsCredentials="set_lims_credentials"
getLimsCredentials="get_lims_credentials"
init="init"
uploadResources="upload_resources"
prepareApplets="prepare_applets"
buildApplets="build_applets"
cleanApplets="cleanApplets"

parser = ArgumentParser(description=description)
parser.add_argument('-e','--environment', required=True, help="The DNANexus working environment. Possible environment values are controlled by the pu.py module. Currently one of {validEnvironments}.".format(validEnvironments=conf.validEnvironments))
parser.add_argument('-v','--verbose',action="store_true",help="Turn on verbose logging (to stdout)")
subparsers = parser.add_subparsers(title="Subcommands")

set_lims_credentials_parser = subparsers.add_parser(setLimsCredentials, help="Set the lims_url and lims_token properties in the DNAnexus account.")
set_lims_credentials_parser.add_argument('--lims-url', required=True, help="URL for UHTS LIMS")
set_lims_credentials_parser.add_argument('--lims-token', required=True, help="Access token for UHTS LIMS")
set_lims_credentials_parser.set_defaults(parserUsed=setLimsCredentials)

get_lims_credentials_parser = subparsers.add_parser(getLimsCredentials,help="Get the lims_url and lims_token property values from the DNAnexus account. Prints them to stdout in the format 'lims_url,lims_token'.")
get_lims_credentials_parser.set_defaults(parserUsed=getLimsCredentials)

init_parser = subparsers.add_parser(init, help='Create required projects and environment settings for the current DNAnexus account')
init_parser.add_argument('--lims-url', required=False, help="URL for UHTS LIMS")
init_parser.add_argument('--lims-token', required=False, help="Access token for UHTS LIMS")
init_parser.set_defaults(parserUsed=init)

upload_parser = subparsers.add_parser(uploadResources, help='Upload the compressed resources bundle')
upload_parser.add_argument('resource_bundle', help='Path and file name of the resource bundle')
upload_parser.set_defaults(parserUsed=uploadResources)

prepare_applets_parser = subparsers.add_parser(prepareApplets,help='Prepare applets to be built. Generates the dxapp.json files from templates')
prepare_applets_parser.set_defaults(parserUsed=prepareApplets)

build_applets_parser = subparsers.add_parser(buildApplets, help='Build and upload applets. Call after prepare_applets')
build_applets_parser.set_defaults(parserUsed=buildApplets)

clean_applets_parser = subparsers.add_parser(cleanApplets,help='Clean up files generated by prepare_applets')
clean_applets_parser.set_defaults(parserUsed=cleanApplets)

args = parser.parse_args()

parserUsed = args.parserUsed
paramDico = {}
environment = args.environment
verbose = args.verbose
paramDico['environment'] = environment
paramDico['verbose'] = verbose
if (parserUsed == setLimsCredentials) or (parserUsed == init):
	paramDico["lims_url"] = args.lims_url
	paramDico["lims_token"] = args.lims_token
elif parserUsed == buildApplets:
    inst = pu.PipelineUtilities(**paramDico)
    if parserUsed == setLimsCredentials:
	    inst.set_lims_credentials()
    elif parserUsed == init:
	    inst.initialize_projects()	
    elif parserUsed == uploadResources:
	    inst.upload_resource_bundle(args.resource_bundle)
    elif parserUsed == prepareApplets:
	    inst.prepare_applets()
    elif parserUsed == buildApplets:
	    inst.prepare_applets()
	    inst.build_applets()
    elif parserUsed == cleanApplets:
	    inst.clean_applets()
    elif parserUsed == getLimsCredentials:
	    url,token = inst.get_lims_credentials()
	    if not url:
		    url = ""
	    if not token:
		    token = ""
	    print("{url},{token}".format(url=url,token=token))
	
